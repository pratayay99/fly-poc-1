name: Fly Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy fp-app and dependents
    runs-on: ubuntu-latest
    concurrency: deploy-group

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Fly CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Set up Docker for Fly
        run: flyctl auth docker
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Set timestamped image tag
        run: |
          export IMAGE_TAG=deployment-$(date +%s)
          export IMAGE=registry.fly.io/fp-app:$IMAGE_TAG
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          echo "üîß Building $IMAGE"
          docker build -t $IMAGE .
          echo "üì¶ Pushing $IMAGE"
          docker push $IMAGE
        env:
          IMAGE: ${{ env.IMAGE }}

      - name: Create .env file from secrets
        run: echo "VITE_REACT_APP_APP_ENV=${{ secrets.VITE_REACT_APP_APP_ENV }}" > .env

      - name: Deploy fp-app (main app) with pushed image
        run: flyctl deploy --image "$IMAGE" --remote-only -a fp-app
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          IMAGE: ${{ env.IMAGE }}

      - name: Delete .env file
        run: rm -f .env

      - name: Get list of Fly.io apps
        run: flyctl apps list --json > apps.json
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Print the image and dependent apps
        run: |
          echo "Using image: $IMAGE"
          apps=$(jq -r '.[].Name' apps.json | grep '^fp-app-' | grep -v '^fp-app$' || true)

          if [[ -z "$apps" ]]; then
            echo "‚úÖ No fp-app-* dependent apps found."
          else
            echo "Found the following dependent apps:"
            echo "$apps"
          fi
        env:
          IMAGE: ${{ env.IMAGE }}

      - name: Deploy dependent fp-app-* apps with latest image
        run: |
          apps=$(jq -r '.[].Name' apps.json | grep '^fp-app-' | grep -v '^fp-app$' || true)

          if [[ -z "$apps" ]]; then
            echo "‚úÖ No fp-app-* dependent apps found to update."
          else
            for app in $apps; do
              echo "üöÄ Deploying $app with image: $IMAGE"
              if ! flyctl deploy --image "$IMAGE" --remote-only -a "$app"; then
                echo "‚ùå Failed to deploy $app"
                exit 1
              fi
            done
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          VITE_REACT_APP_APP_ENV: ${{ secrets.VITE_REACT_APP_APP_ENV }}
          IMAGE: ${{ env.IMAGE }}

      - name: Clean up temporary files
        run: rm -f apps.json
